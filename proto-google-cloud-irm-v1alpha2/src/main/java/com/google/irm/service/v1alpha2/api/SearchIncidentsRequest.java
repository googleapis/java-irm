/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/irm/v1alpha2/incidents_service.proto

package com.google.irm.service.v1alpha2.api;

/**
 *
 *
 * <pre>
 * Request for the SearchIncidents method.
 * </pre>
 *
 * Protobuf type {@code google.cloud.irm.v1alpha2.SearchIncidentsRequest}
 */
public final class SearchIncidentsRequest extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.irm.v1alpha2.SearchIncidentsRequest)
    SearchIncidentsRequestOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use SearchIncidentsRequest.newBuilder() to construct.
  private SearchIncidentsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private SearchIncidentsRequest() {
    parent_ = "";
    query_ = "";
    pageToken_ = "";
    timeZone_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new SearchIncidentsRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private SearchIncidentsRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              java.lang.String s = input.readStringRequireUtf8();

              parent_ = s;
              break;
            }
          case 18:
            {
              java.lang.String s = input.readStringRequireUtf8();

              query_ = s;
              break;
            }
          case 24:
            {
              pageSize_ = input.readInt32();
              break;
            }
          case 34:
            {
              java.lang.String s = input.readStringRequireUtf8();

              pageToken_ = s;
              break;
            }
          case 42:
            {
              java.lang.String s = input.readStringRequireUtf8();

              timeZone_ = s;
              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.irm.service.v1alpha2.api.IncidentsService
        .internal_static_google_cloud_irm_v1alpha2_SearchIncidentsRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.irm.service.v1alpha2.api.IncidentsService
        .internal_static_google_cloud_irm_v1alpha2_SearchIncidentsRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.irm.service.v1alpha2.api.SearchIncidentsRequest.class,
            com.google.irm.service.v1alpha2.api.SearchIncidentsRequest.Builder.class);
  }

  public static final int PARENT_FIELD_NUMBER = 1;
  private volatile java.lang.Object parent_;
  /**
   *
   *
   * <pre>
   * The resource name of the hosting Stackdriver project which requested
   * incidents belong to.
   * </pre>
   *
   * <code>string parent = 1;</code>
   *
   * @return The parent.
   */
  public java.lang.String getParent() {
    java.lang.Object ref = parent_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      parent_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The resource name of the hosting Stackdriver project which requested
   * incidents belong to.
   * </pre>
   *
   * <code>string parent = 1;</code>
   *
   * @return The bytes for parent.
   */
  public com.google.protobuf.ByteString getParentBytes() {
    java.lang.Object ref = parent_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      parent_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int QUERY_FIELD_NUMBER = 2;
  private volatile java.lang.Object query_;
  /**
   *
   *
   * <pre>
   * An expression that defines which incidents to return.
   * Search atoms can be used to match certain specific fields.  Otherwise,
   * plain text will match text fields in the incident.
   * Search atoms:
   * * `start` - (timestamp) The time the incident started.
   * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
   *   resolved, documented, or duplicate (which correspond to values in the
   *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
   *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
   * * `severity` - (Incident.Severity) The severity of the incident.
   *    + Supports matching on a specific severity (for example,
   *    `severity:major`) or on a range (for example, `severity&gt;medium`,
   *    `severity&lt;=minor`, etc.).
   * Timestamp formats:
   * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
   *   In other words, the "&lt;" operator will match dates before that date, the
   *   "&gt;" operator will match dates after that date, and the ":" or "="
   *   operators will match the entire day.
   * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
   *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
   *   opposed to calendar days).  In the case of daylight savings time, it will
   *   apply the current timezone to both ends of the range.  Note that exact
   *   matching (for example, `start:7d`) is unlikely to be useful because that
   *   would only match incidents created precisely at a particular instant in
   *   time.
   * Examples:
   * * `foo` - matches incidents containing the word "foo"
   * * `"foo bar"` - matches incidents containing the phrase "foo bar"
   * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
   *   and "bar"
   * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
   *   "foo" but not the word "bar"
   * * `foo OR bar` - matches incidents containing the word "foo" or the word
   *   "bar"
   * * `start&gt;2018-11-28` - matches incidents which started after November 11,
   *   2018.
   * * `start&lt;=2018-11-28` - matches incidents which started on or before
   *   November 11, 2018.
   * * `start:2018-11-28` - matches incidents which started on November 11,
   *   2018.
   * * `start&gt;7d` - matches incidents which started after the point in time 7*24
   *   hours ago
   * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
   *   time boundary, so the end time will be 1 hour different from "now."
   * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
   *   past 90 days containing the word "foo"
   * </pre>
   *
   * <code>string query = 2;</code>
   *
   * @return The query.
   */
  public java.lang.String getQuery() {
    java.lang.Object ref = query_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      query_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * An expression that defines which incidents to return.
   * Search atoms can be used to match certain specific fields.  Otherwise,
   * plain text will match text fields in the incident.
   * Search atoms:
   * * `start` - (timestamp) The time the incident started.
   * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
   *   resolved, documented, or duplicate (which correspond to values in the
   *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
   *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
   * * `severity` - (Incident.Severity) The severity of the incident.
   *    + Supports matching on a specific severity (for example,
   *    `severity:major`) or on a range (for example, `severity&gt;medium`,
   *    `severity&lt;=minor`, etc.).
   * Timestamp formats:
   * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
   *   In other words, the "&lt;" operator will match dates before that date, the
   *   "&gt;" operator will match dates after that date, and the ":" or "="
   *   operators will match the entire day.
   * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
   *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
   *   opposed to calendar days).  In the case of daylight savings time, it will
   *   apply the current timezone to both ends of the range.  Note that exact
   *   matching (for example, `start:7d`) is unlikely to be useful because that
   *   would only match incidents created precisely at a particular instant in
   *   time.
   * Examples:
   * * `foo` - matches incidents containing the word "foo"
   * * `"foo bar"` - matches incidents containing the phrase "foo bar"
   * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
   *   and "bar"
   * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
   *   "foo" but not the word "bar"
   * * `foo OR bar` - matches incidents containing the word "foo" or the word
   *   "bar"
   * * `start&gt;2018-11-28` - matches incidents which started after November 11,
   *   2018.
   * * `start&lt;=2018-11-28` - matches incidents which started on or before
   *   November 11, 2018.
   * * `start:2018-11-28` - matches incidents which started on November 11,
   *   2018.
   * * `start&gt;7d` - matches incidents which started after the point in time 7*24
   *   hours ago
   * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
   *   time boundary, so the end time will be 1 hour different from "now."
   * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
   *   past 90 days containing the word "foo"
   * </pre>
   *
   * <code>string query = 2;</code>
   *
   * @return The bytes for query.
   */
  public com.google.protobuf.ByteString getQueryBytes() {
    java.lang.Object ref = query_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      query_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PAGE_SIZE_FIELD_NUMBER = 3;
  private int pageSize_;
  /**
   *
   *
   * <pre>
   * Number of incidents to return.
   * </pre>
   *
   * <code>int32 page_size = 3;</code>
   *
   * @return The pageSize.
   */
  public int getPageSize() {
    return pageSize_;
  }

  public static final int PAGE_TOKEN_FIELD_NUMBER = 4;
  private volatile java.lang.Object pageToken_;
  /**
   *
   *
   * <pre>
   * Page token from an earlier query, as returned in `next_page_token`.
   * </pre>
   *
   * <code>string page_token = 4;</code>
   *
   * @return The pageToken.
   */
  public java.lang.String getPageToken() {
    java.lang.Object ref = pageToken_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pageToken_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Page token from an earlier query, as returned in `next_page_token`.
   * </pre>
   *
   * <code>string page_token = 4;</code>
   *
   * @return The bytes for pageToken.
   */
  public com.google.protobuf.ByteString getPageTokenBytes() {
    java.lang.Object ref = pageToken_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      pageToken_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TIME_ZONE_FIELD_NUMBER = 5;
  private volatile java.lang.Object timeZone_;
  /**
   *
   *
   * <pre>
   * The time zone name. It should be an IANA TZ name, such as
   * "America/Los_Angeles". For more information,
   * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
   * If no time zone is specified, the default is UTC.
   * </pre>
   *
   * <code>string time_zone = 5;</code>
   *
   * @return The timeZone.
   */
  public java.lang.String getTimeZone() {
    java.lang.Object ref = timeZone_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      timeZone_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * The time zone name. It should be an IANA TZ name, such as
   * "America/Los_Angeles". For more information,
   * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
   * If no time zone is specified, the default is UTC.
   * </pre>
   *
   * <code>string time_zone = 5;</code>
   *
   * @return The bytes for timeZone.
   */
  public com.google.protobuf.ByteString getTimeZoneBytes() {
    java.lang.Object ref = timeZone_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      timeZone_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!getParentBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, parent_);
    }
    if (!getQueryBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, query_);
    }
    if (pageSize_ != 0) {
      output.writeInt32(3, pageSize_);
    }
    if (!getPageTokenBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, pageToken_);
    }
    if (!getTimeZoneBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, timeZone_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getParentBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, parent_);
    }
    if (!getQueryBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, query_);
    }
    if (pageSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(3, pageSize_);
    }
    if (!getPageTokenBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, pageToken_);
    }
    if (!getTimeZoneBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, timeZone_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.irm.service.v1alpha2.api.SearchIncidentsRequest)) {
      return super.equals(obj);
    }
    com.google.irm.service.v1alpha2.api.SearchIncidentsRequest other =
        (com.google.irm.service.v1alpha2.api.SearchIncidentsRequest) obj;

    if (!getParent().equals(other.getParent())) return false;
    if (!getQuery().equals(other.getQuery())) return false;
    if (getPageSize() != other.getPageSize()) return false;
    if (!getPageToken().equals(other.getPageToken())) return false;
    if (!getTimeZone().equals(other.getTimeZone())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PARENT_FIELD_NUMBER;
    hash = (53 * hash) + getParent().hashCode();
    hash = (37 * hash) + QUERY_FIELD_NUMBER;
    hash = (53 * hash) + getQuery().hashCode();
    hash = (37 * hash) + PAGE_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getPageSize();
    hash = (37 * hash) + PAGE_TOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getPageToken().hashCode();
    hash = (37 * hash) + TIME_ZONE_FIELD_NUMBER;
    hash = (53 * hash) + getTimeZone().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.irm.service.v1alpha2.api.SearchIncidentsRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Request for the SearchIncidents method.
   * </pre>
   *
   * Protobuf type {@code google.cloud.irm.v1alpha2.SearchIncidentsRequest}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.irm.v1alpha2.SearchIncidentsRequest)
      com.google.irm.service.v1alpha2.api.SearchIncidentsRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.irm.service.v1alpha2.api.IncidentsService
          .internal_static_google_cloud_irm_v1alpha2_SearchIncidentsRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.irm.service.v1alpha2.api.IncidentsService
          .internal_static_google_cloud_irm_v1alpha2_SearchIncidentsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.irm.service.v1alpha2.api.SearchIncidentsRequest.class,
              com.google.irm.service.v1alpha2.api.SearchIncidentsRequest.Builder.class);
    }

    // Construct using com.google.irm.service.v1alpha2.api.SearchIncidentsRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      parent_ = "";

      query_ = "";

      pageSize_ = 0;

      pageToken_ = "";

      timeZone_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.irm.service.v1alpha2.api.IncidentsService
          .internal_static_google_cloud_irm_v1alpha2_SearchIncidentsRequest_descriptor;
    }

    @java.lang.Override
    public com.google.irm.service.v1alpha2.api.SearchIncidentsRequest getDefaultInstanceForType() {
      return com.google.irm.service.v1alpha2.api.SearchIncidentsRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.irm.service.v1alpha2.api.SearchIncidentsRequest build() {
      com.google.irm.service.v1alpha2.api.SearchIncidentsRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.irm.service.v1alpha2.api.SearchIncidentsRequest buildPartial() {
      com.google.irm.service.v1alpha2.api.SearchIncidentsRequest result =
          new com.google.irm.service.v1alpha2.api.SearchIncidentsRequest(this);
      result.parent_ = parent_;
      result.query_ = query_;
      result.pageSize_ = pageSize_;
      result.pageToken_ = pageToken_;
      result.timeZone_ = timeZone_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.irm.service.v1alpha2.api.SearchIncidentsRequest) {
        return mergeFrom((com.google.irm.service.v1alpha2.api.SearchIncidentsRequest) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.irm.service.v1alpha2.api.SearchIncidentsRequest other) {
      if (other == com.google.irm.service.v1alpha2.api.SearchIncidentsRequest.getDefaultInstance())
        return this;
      if (!other.getParent().isEmpty()) {
        parent_ = other.parent_;
        onChanged();
      }
      if (!other.getQuery().isEmpty()) {
        query_ = other.query_;
        onChanged();
      }
      if (other.getPageSize() != 0) {
        setPageSize(other.getPageSize());
      }
      if (!other.getPageToken().isEmpty()) {
        pageToken_ = other.pageToken_;
        onChanged();
      }
      if (!other.getTimeZone().isEmpty()) {
        timeZone_ = other.timeZone_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.irm.service.v1alpha2.api.SearchIncidentsRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage =
            (com.google.irm.service.v1alpha2.api.SearchIncidentsRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object parent_ = "";
    /**
     *
     *
     * <pre>
     * The resource name of the hosting Stackdriver project which requested
     * incidents belong to.
     * </pre>
     *
     * <code>string parent = 1;</code>
     *
     * @return The parent.
     */
    public java.lang.String getParent() {
      java.lang.Object ref = parent_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parent_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The resource name of the hosting Stackdriver project which requested
     * incidents belong to.
     * </pre>
     *
     * <code>string parent = 1;</code>
     *
     * @return The bytes for parent.
     */
    public com.google.protobuf.ByteString getParentBytes() {
      java.lang.Object ref = parent_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        parent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The resource name of the hosting Stackdriver project which requested
     * incidents belong to.
     * </pre>
     *
     * <code>string parent = 1;</code>
     *
     * @param value The parent to set.
     * @return This builder for chaining.
     */
    public Builder setParent(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      parent_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The resource name of the hosting Stackdriver project which requested
     * incidents belong to.
     * </pre>
     *
     * <code>string parent = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearParent() {

      parent_ = getDefaultInstance().getParent();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The resource name of the hosting Stackdriver project which requested
     * incidents belong to.
     * </pre>
     *
     * <code>string parent = 1;</code>
     *
     * @param value The bytes for parent to set.
     * @return This builder for chaining.
     */
    public Builder setParentBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      parent_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object query_ = "";
    /**
     *
     *
     * <pre>
     * An expression that defines which incidents to return.
     * Search atoms can be used to match certain specific fields.  Otherwise,
     * plain text will match text fields in the incident.
     * Search atoms:
     * * `start` - (timestamp) The time the incident started.
     * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
     *   resolved, documented, or duplicate (which correspond to values in the
     *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
     *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
     * * `severity` - (Incident.Severity) The severity of the incident.
     *    + Supports matching on a specific severity (for example,
     *    `severity:major`) or on a range (for example, `severity&gt;medium`,
     *    `severity&lt;=minor`, etc.).
     * Timestamp formats:
     * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
     *   In other words, the "&lt;" operator will match dates before that date, the
     *   "&gt;" operator will match dates after that date, and the ":" or "="
     *   operators will match the entire day.
     * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
     *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
     *   opposed to calendar days).  In the case of daylight savings time, it will
     *   apply the current timezone to both ends of the range.  Note that exact
     *   matching (for example, `start:7d`) is unlikely to be useful because that
     *   would only match incidents created precisely at a particular instant in
     *   time.
     * Examples:
     * * `foo` - matches incidents containing the word "foo"
     * * `"foo bar"` - matches incidents containing the phrase "foo bar"
     * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
     *   and "bar"
     * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
     *   "foo" but not the word "bar"
     * * `foo OR bar` - matches incidents containing the word "foo" or the word
     *   "bar"
     * * `start&gt;2018-11-28` - matches incidents which started after November 11,
     *   2018.
     * * `start&lt;=2018-11-28` - matches incidents which started on or before
     *   November 11, 2018.
     * * `start:2018-11-28` - matches incidents which started on November 11,
     *   2018.
     * * `start&gt;7d` - matches incidents which started after the point in time 7*24
     *   hours ago
     * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
     *   time boundary, so the end time will be 1 hour different from "now."
     * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
     *   past 90 days containing the word "foo"
     * </pre>
     *
     * <code>string query = 2;</code>
     *
     * @return The query.
     */
    public java.lang.String getQuery() {
      java.lang.Object ref = query_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        query_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * An expression that defines which incidents to return.
     * Search atoms can be used to match certain specific fields.  Otherwise,
     * plain text will match text fields in the incident.
     * Search atoms:
     * * `start` - (timestamp) The time the incident started.
     * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
     *   resolved, documented, or duplicate (which correspond to values in the
     *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
     *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
     * * `severity` - (Incident.Severity) The severity of the incident.
     *    + Supports matching on a specific severity (for example,
     *    `severity:major`) or on a range (for example, `severity&gt;medium`,
     *    `severity&lt;=minor`, etc.).
     * Timestamp formats:
     * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
     *   In other words, the "&lt;" operator will match dates before that date, the
     *   "&gt;" operator will match dates after that date, and the ":" or "="
     *   operators will match the entire day.
     * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
     *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
     *   opposed to calendar days).  In the case of daylight savings time, it will
     *   apply the current timezone to both ends of the range.  Note that exact
     *   matching (for example, `start:7d`) is unlikely to be useful because that
     *   would only match incidents created precisely at a particular instant in
     *   time.
     * Examples:
     * * `foo` - matches incidents containing the word "foo"
     * * `"foo bar"` - matches incidents containing the phrase "foo bar"
     * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
     *   and "bar"
     * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
     *   "foo" but not the word "bar"
     * * `foo OR bar` - matches incidents containing the word "foo" or the word
     *   "bar"
     * * `start&gt;2018-11-28` - matches incidents which started after November 11,
     *   2018.
     * * `start&lt;=2018-11-28` - matches incidents which started on or before
     *   November 11, 2018.
     * * `start:2018-11-28` - matches incidents which started on November 11,
     *   2018.
     * * `start&gt;7d` - matches incidents which started after the point in time 7*24
     *   hours ago
     * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
     *   time boundary, so the end time will be 1 hour different from "now."
     * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
     *   past 90 days containing the word "foo"
     * </pre>
     *
     * <code>string query = 2;</code>
     *
     * @return The bytes for query.
     */
    public com.google.protobuf.ByteString getQueryBytes() {
      java.lang.Object ref = query_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        query_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * An expression that defines which incidents to return.
     * Search atoms can be used to match certain specific fields.  Otherwise,
     * plain text will match text fields in the incident.
     * Search atoms:
     * * `start` - (timestamp) The time the incident started.
     * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
     *   resolved, documented, or duplicate (which correspond to values in the
     *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
     *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
     * * `severity` - (Incident.Severity) The severity of the incident.
     *    + Supports matching on a specific severity (for example,
     *    `severity:major`) or on a range (for example, `severity&gt;medium`,
     *    `severity&lt;=minor`, etc.).
     * Timestamp formats:
     * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
     *   In other words, the "&lt;" operator will match dates before that date, the
     *   "&gt;" operator will match dates after that date, and the ":" or "="
     *   operators will match the entire day.
     * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
     *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
     *   opposed to calendar days).  In the case of daylight savings time, it will
     *   apply the current timezone to both ends of the range.  Note that exact
     *   matching (for example, `start:7d`) is unlikely to be useful because that
     *   would only match incidents created precisely at a particular instant in
     *   time.
     * Examples:
     * * `foo` - matches incidents containing the word "foo"
     * * `"foo bar"` - matches incidents containing the phrase "foo bar"
     * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
     *   and "bar"
     * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
     *   "foo" but not the word "bar"
     * * `foo OR bar` - matches incidents containing the word "foo" or the word
     *   "bar"
     * * `start&gt;2018-11-28` - matches incidents which started after November 11,
     *   2018.
     * * `start&lt;=2018-11-28` - matches incidents which started on or before
     *   November 11, 2018.
     * * `start:2018-11-28` - matches incidents which started on November 11,
     *   2018.
     * * `start&gt;7d` - matches incidents which started after the point in time 7*24
     *   hours ago
     * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
     *   time boundary, so the end time will be 1 hour different from "now."
     * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
     *   past 90 days containing the word "foo"
     * </pre>
     *
     * <code>string query = 2;</code>
     *
     * @param value The query to set.
     * @return This builder for chaining.
     */
    public Builder setQuery(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      query_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * An expression that defines which incidents to return.
     * Search atoms can be used to match certain specific fields.  Otherwise,
     * plain text will match text fields in the incident.
     * Search atoms:
     * * `start` - (timestamp) The time the incident started.
     * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
     *   resolved, documented, or duplicate (which correspond to values in the
     *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
     *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
     * * `severity` - (Incident.Severity) The severity of the incident.
     *    + Supports matching on a specific severity (for example,
     *    `severity:major`) or on a range (for example, `severity&gt;medium`,
     *    `severity&lt;=minor`, etc.).
     * Timestamp formats:
     * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
     *   In other words, the "&lt;" operator will match dates before that date, the
     *   "&gt;" operator will match dates after that date, and the ":" or "="
     *   operators will match the entire day.
     * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
     *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
     *   opposed to calendar days).  In the case of daylight savings time, it will
     *   apply the current timezone to both ends of the range.  Note that exact
     *   matching (for example, `start:7d`) is unlikely to be useful because that
     *   would only match incidents created precisely at a particular instant in
     *   time.
     * Examples:
     * * `foo` - matches incidents containing the word "foo"
     * * `"foo bar"` - matches incidents containing the phrase "foo bar"
     * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
     *   and "bar"
     * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
     *   "foo" but not the word "bar"
     * * `foo OR bar` - matches incidents containing the word "foo" or the word
     *   "bar"
     * * `start&gt;2018-11-28` - matches incidents which started after November 11,
     *   2018.
     * * `start&lt;=2018-11-28` - matches incidents which started on or before
     *   November 11, 2018.
     * * `start:2018-11-28` - matches incidents which started on November 11,
     *   2018.
     * * `start&gt;7d` - matches incidents which started after the point in time 7*24
     *   hours ago
     * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
     *   time boundary, so the end time will be 1 hour different from "now."
     * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
     *   past 90 days containing the word "foo"
     * </pre>
     *
     * <code>string query = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearQuery() {

      query_ = getDefaultInstance().getQuery();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * An expression that defines which incidents to return.
     * Search atoms can be used to match certain specific fields.  Otherwise,
     * plain text will match text fields in the incident.
     * Search atoms:
     * * `start` - (timestamp) The time the incident started.
     * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
     *   resolved, documented, or duplicate (which correspond to values in the
     *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
     *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
     * * `severity` - (Incident.Severity) The severity of the incident.
     *    + Supports matching on a specific severity (for example,
     *    `severity:major`) or on a range (for example, `severity&gt;medium`,
     *    `severity&lt;=minor`, etc.).
     * Timestamp formats:
     * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
     *   In other words, the "&lt;" operator will match dates before that date, the
     *   "&gt;" operator will match dates after that date, and the ":" or "="
     *   operators will match the entire day.
     * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
     *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
     *   opposed to calendar days).  In the case of daylight savings time, it will
     *   apply the current timezone to both ends of the range.  Note that exact
     *   matching (for example, `start:7d`) is unlikely to be useful because that
     *   would only match incidents created precisely at a particular instant in
     *   time.
     * Examples:
     * * `foo` - matches incidents containing the word "foo"
     * * `"foo bar"` - matches incidents containing the phrase "foo bar"
     * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
     *   and "bar"
     * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
     *   "foo" but not the word "bar"
     * * `foo OR bar` - matches incidents containing the word "foo" or the word
     *   "bar"
     * * `start&gt;2018-11-28` - matches incidents which started after November 11,
     *   2018.
     * * `start&lt;=2018-11-28` - matches incidents which started on or before
     *   November 11, 2018.
     * * `start:2018-11-28` - matches incidents which started on November 11,
     *   2018.
     * * `start&gt;7d` - matches incidents which started after the point in time 7*24
     *   hours ago
     * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
     *   time boundary, so the end time will be 1 hour different from "now."
     * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
     *   past 90 days containing the word "foo"
     * </pre>
     *
     * <code>string query = 2;</code>
     *
     * @param value The bytes for query to set.
     * @return This builder for chaining.
     */
    public Builder setQueryBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      query_ = value;
      onChanged();
      return this;
    }

    private int pageSize_;
    /**
     *
     *
     * <pre>
     * Number of incidents to return.
     * </pre>
     *
     * <code>int32 page_size = 3;</code>
     *
     * @return The pageSize.
     */
    public int getPageSize() {
      return pageSize_;
    }
    /**
     *
     *
     * <pre>
     * Number of incidents to return.
     * </pre>
     *
     * <code>int32 page_size = 3;</code>
     *
     * @param value The pageSize to set.
     * @return This builder for chaining.
     */
    public Builder setPageSize(int value) {

      pageSize_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Number of incidents to return.
     * </pre>
     *
     * <code>int32 page_size = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPageSize() {

      pageSize_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object pageToken_ = "";
    /**
     *
     *
     * <pre>
     * Page token from an earlier query, as returned in `next_page_token`.
     * </pre>
     *
     * <code>string page_token = 4;</code>
     *
     * @return The pageToken.
     */
    public java.lang.String getPageToken() {
      java.lang.Object ref = pageToken_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pageToken_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Page token from an earlier query, as returned in `next_page_token`.
     * </pre>
     *
     * <code>string page_token = 4;</code>
     *
     * @return The bytes for pageToken.
     */
    public com.google.protobuf.ByteString getPageTokenBytes() {
      java.lang.Object ref = pageToken_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        pageToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Page token from an earlier query, as returned in `next_page_token`.
     * </pre>
     *
     * <code>string page_token = 4;</code>
     *
     * @param value The pageToken to set.
     * @return This builder for chaining.
     */
    public Builder setPageToken(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      pageToken_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Page token from an earlier query, as returned in `next_page_token`.
     * </pre>
     *
     * <code>string page_token = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPageToken() {

      pageToken_ = getDefaultInstance().getPageToken();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Page token from an earlier query, as returned in `next_page_token`.
     * </pre>
     *
     * <code>string page_token = 4;</code>
     *
     * @param value The bytes for pageToken to set.
     * @return This builder for chaining.
     */
    public Builder setPageTokenBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      pageToken_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object timeZone_ = "";
    /**
     *
     *
     * <pre>
     * The time zone name. It should be an IANA TZ name, such as
     * "America/Los_Angeles". For more information,
     * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
     * If no time zone is specified, the default is UTC.
     * </pre>
     *
     * <code>string time_zone = 5;</code>
     *
     * @return The timeZone.
     */
    public java.lang.String getTimeZone() {
      java.lang.Object ref = timeZone_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        timeZone_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The time zone name. It should be an IANA TZ name, such as
     * "America/Los_Angeles". For more information,
     * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
     * If no time zone is specified, the default is UTC.
     * </pre>
     *
     * <code>string time_zone = 5;</code>
     *
     * @return The bytes for timeZone.
     */
    public com.google.protobuf.ByteString getTimeZoneBytes() {
      java.lang.Object ref = timeZone_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        timeZone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * The time zone name. It should be an IANA TZ name, such as
     * "America/Los_Angeles". For more information,
     * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
     * If no time zone is specified, the default is UTC.
     * </pre>
     *
     * <code>string time_zone = 5;</code>
     *
     * @param value The timeZone to set.
     * @return This builder for chaining.
     */
    public Builder setTimeZone(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      timeZone_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The time zone name. It should be an IANA TZ name, such as
     * "America/Los_Angeles". For more information,
     * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
     * If no time zone is specified, the default is UTC.
     * </pre>
     *
     * <code>string time_zone = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTimeZone() {

      timeZone_ = getDefaultInstance().getTimeZone();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The time zone name. It should be an IANA TZ name, such as
     * "America/Los_Angeles". For more information,
     * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
     * If no time zone is specified, the default is UTC.
     * </pre>
     *
     * <code>string time_zone = 5;</code>
     *
     * @param value The bytes for timeZone to set.
     * @return This builder for chaining.
     */
    public Builder setTimeZoneBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      timeZone_ = value;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.irm.v1alpha2.SearchIncidentsRequest)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.irm.v1alpha2.SearchIncidentsRequest)
  private static final com.google.irm.service.v1alpha2.api.SearchIncidentsRequest DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.irm.service.v1alpha2.api.SearchIncidentsRequest();
  }

  public static com.google.irm.service.v1alpha2.api.SearchIncidentsRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SearchIncidentsRequest> PARSER =
      new com.google.protobuf.AbstractParser<SearchIncidentsRequest>() {
        @java.lang.Override
        public SearchIncidentsRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SearchIncidentsRequest(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<SearchIncidentsRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SearchIncidentsRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.irm.service.v1alpha2.api.SearchIncidentsRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
