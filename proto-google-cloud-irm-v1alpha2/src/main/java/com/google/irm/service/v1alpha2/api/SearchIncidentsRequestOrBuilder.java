/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/irm/v1alpha2/incidents_service.proto

package com.google.irm.service.v1alpha2.api;

public interface SearchIncidentsRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.irm.v1alpha2.SearchIncidentsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The resource name of the hosting Stackdriver project which requested
   * incidents belong to.
   * </pre>
   *
   * <code>string parent = 1;</code>
   *
   * @return The parent.
   */
  java.lang.String getParent();
  /**
   *
   *
   * <pre>
   * The resource name of the hosting Stackdriver project which requested
   * incidents belong to.
   * </pre>
   *
   * <code>string parent = 1;</code>
   *
   * @return The bytes for parent.
   */
  com.google.protobuf.ByteString getParentBytes();

  /**
   *
   *
   * <pre>
   * An expression that defines which incidents to return.
   * Search atoms can be used to match certain specific fields.  Otherwise,
   * plain text will match text fields in the incident.
   * Search atoms:
   * * `start` - (timestamp) The time the incident started.
   * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
   *   resolved, documented, or duplicate (which correspond to values in the
   *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
   *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
   * * `severity` - (Incident.Severity) The severity of the incident.
   *    + Supports matching on a specific severity (for example,
   *    `severity:major`) or on a range (for example, `severity&gt;medium`,
   *    `severity&lt;=minor`, etc.).
   * Timestamp formats:
   * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
   *   In other words, the "&lt;" operator will match dates before that date, the
   *   "&gt;" operator will match dates after that date, and the ":" or "="
   *   operators will match the entire day.
   * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
   *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
   *   opposed to calendar days).  In the case of daylight savings time, it will
   *   apply the current timezone to both ends of the range.  Note that exact
   *   matching (for example, `start:7d`) is unlikely to be useful because that
   *   would only match incidents created precisely at a particular instant in
   *   time.
   * Examples:
   * * `foo` - matches incidents containing the word "foo"
   * * `"foo bar"` - matches incidents containing the phrase "foo bar"
   * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
   *   and "bar"
   * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
   *   "foo" but not the word "bar"
   * * `foo OR bar` - matches incidents containing the word "foo" or the word
   *   "bar"
   * * `start&gt;2018-11-28` - matches incidents which started after November 11,
   *   2018.
   * * `start&lt;=2018-11-28` - matches incidents which started on or before
   *   November 11, 2018.
   * * `start:2018-11-28` - matches incidents which started on November 11,
   *   2018.
   * * `start&gt;7d` - matches incidents which started after the point in time 7*24
   *   hours ago
   * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
   *   time boundary, so the end time will be 1 hour different from "now."
   * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
   *   past 90 days containing the word "foo"
   * </pre>
   *
   * <code>string query = 2;</code>
   *
   * @return The query.
   */
  java.lang.String getQuery();
  /**
   *
   *
   * <pre>
   * An expression that defines which incidents to return.
   * Search atoms can be used to match certain specific fields.  Otherwise,
   * plain text will match text fields in the incident.
   * Search atoms:
   * * `start` - (timestamp) The time the incident started.
   * * `stage` - The stage of the incident, one of detected, triaged, mitigated,
   *   resolved, documented, or duplicate (which correspond to values in the
   *   Incident.Stage enum). These are ordered, so `stage&lt;resolved` is
   *   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
   * * `severity` - (Incident.Severity) The severity of the incident.
   *    + Supports matching on a specific severity (for example,
   *    `severity:major`) or on a range (for example, `severity&gt;medium`,
   *    `severity&lt;=minor`, etc.).
   * Timestamp formats:
   * * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
   *   In other words, the "&lt;" operator will match dates before that date, the
   *   "&gt;" operator will match dates after that date, and the ":" or "="
   *   operators will match the entire day.
   * * Nd (for example, 7d) - a relative number of days ago, treated as a moment
   *   in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
   *   opposed to calendar days).  In the case of daylight savings time, it will
   *   apply the current timezone to both ends of the range.  Note that exact
   *   matching (for example, `start:7d`) is unlikely to be useful because that
   *   would only match incidents created precisely at a particular instant in
   *   time.
   * Examples:
   * * `foo` - matches incidents containing the word "foo"
   * * `"foo bar"` - matches incidents containing the phrase "foo bar"
   * * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
   *   and "bar"
   * * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
   *   "foo" but not the word "bar"
   * * `foo OR bar` - matches incidents containing the word "foo" or the word
   *   "bar"
   * * `start&gt;2018-11-28` - matches incidents which started after November 11,
   *   2018.
   * * `start&lt;=2018-11-28` - matches incidents which started on or before
   *   November 11, 2018.
   * * `start:2018-11-28` - matches incidents which started on November 11,
   *   2018.
   * * `start&gt;7d` - matches incidents which started after the point in time 7*24
   *   hours ago
   * * `start&gt;180d` - similar to 7d, but likely to cross the daylight savings
   *   time boundary, so the end time will be 1 hour different from "now."
   * * `foo AND start&gt;90d AND stage&lt;resolved` - unresolved incidents from the
   *   past 90 days containing the word "foo"
   * </pre>
   *
   * <code>string query = 2;</code>
   *
   * @return The bytes for query.
   */
  com.google.protobuf.ByteString getQueryBytes();

  /**
   *
   *
   * <pre>
   * Number of incidents to return.
   * </pre>
   *
   * <code>int32 page_size = 3;</code>
   *
   * @return The pageSize.
   */
  int getPageSize();

  /**
   *
   *
   * <pre>
   * Page token from an earlier query, as returned in `next_page_token`.
   * </pre>
   *
   * <code>string page_token = 4;</code>
   *
   * @return The pageToken.
   */
  java.lang.String getPageToken();
  /**
   *
   *
   * <pre>
   * Page token from an earlier query, as returned in `next_page_token`.
   * </pre>
   *
   * <code>string page_token = 4;</code>
   *
   * @return The bytes for pageToken.
   */
  com.google.protobuf.ByteString getPageTokenBytes();

  /**
   *
   *
   * <pre>
   * The time zone name. It should be an IANA TZ name, such as
   * "America/Los_Angeles". For more information,
   * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
   * If no time zone is specified, the default is UTC.
   * </pre>
   *
   * <code>string time_zone = 5;</code>
   *
   * @return The timeZone.
   */
  java.lang.String getTimeZone();
  /**
   *
   *
   * <pre>
   * The time zone name. It should be an IANA TZ name, such as
   * "America/Los_Angeles". For more information,
   * see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
   * If no time zone is specified, the default is UTC.
   * </pre>
   *
   * <code>string time_zone = 5;</code>
   *
   * @return The bytes for timeZone.
   */
  com.google.protobuf.ByteString getTimeZoneBytes();
}
